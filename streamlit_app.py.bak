import os, json, time, importlib
from typing import Dict, Any, Callable

import streamlit as st

st.set_page_config(page_title='HFT Validator - Agent Console', page_icon='ü§ñ', layout='wide')
st.title('ü§ñ HFT Validator ‚Äî Agent Console')
st.caption('Toggle between Local (Dry-Run) and AWS (Bedrock) mode. Provide metrics, then get a validator decision.')

@st.cache_resource(show_spinner=False)
def resolve_agent() -> Callable[[Dict[str, Any]], Dict[str, Any]]:
    """
    Try multiple known locations for the agent entrypoint and normalize to a call signature: fn(metrics: dict) -> dict
    """
    candidates = [
        ('python.agent_bedrock', 'run_agent', None),
        ('agents.bedrock_agent.agent', 'decide', None),
        ('app.agent.bedrock', 'run_agent', None),
        ('python.agent_validator', 'run_agent', None),
    ]
    errs = []
    for modname, attr, _ in candidates:
        try:
            mod = importlib.import_module(modname)
            fn = getattr(mod, attr, None)
            if callable(fn):
                st.sidebar.info(f'Agent resolved: `{modname}.{attr}()`')
                return fn
            else:
                errs.append(f'{modname}: missing `{attr}`')
        except Exception as e:
            errs.append(f'{modname}: {e}')
    raise ImportError('Could not resolve agent entrypoint. Tried: ' + '; '.join(errs))

def set_mode_env(mode: str, region: str, model_id: str):
    if mode.startswith('Local'):
        os.environ['HFT_AGENT_DRYRUN'] = '1'
    else:
        if 'HFT_AGENT_DRYRUN' in os.environ:
            del os.environ['HFT_AGENT_DRYRUN']
        os.environ['AWS_REGION'] = region.strip()
        os.environ['BEDROCK_MODEL_ID'] = model_id.strip()

# Sidebar controls
st.sidebar.header('‚öôÔ∏è Settings')
mode = st.sidebar.radio('Mode', ['Local (Dry-Run)', 'AWS (Bedrock)'], index=0, help='Select how the agent should run')

default_region = os.environ.get('AWS_REGION', 'us-east-1')
default_model  = os.environ.get('BEDROCK_MODEL_ID', 'anthropic.claude-3-5-sonnet-20241022-v2:0')
region = st.sidebar.text_input('AWS Region', value=default_region, help='Used only in AWS mode')
model_id = st.sidebar.text_input('Bedrock Model ID', value=default_model, help='Used only in AWS mode')

st.sidebar.write('---')
st.sidebar.subheader('üß™ Example Metrics')
example_metrics = {'sharpe_like': 0.8, 'drawdown': 0.05, 'trades': 120}
if st.sidebar.button('Load Example Metrics'):
    st.session_state['metrics_text'] = json.dumps(example_metrics, indent=2)

st.subheader('üìä Input Metrics (JSON)')
placeholder = json.dumps(example_metrics, indent=2)
metrics_text = st.text_area('Provide recent trading metrics as JSON', value=st.session_state.get('metrics_text', placeholder), height=200)

col1, col2 = st.columns([1,1])
run_clicked = col1.button('üöÄ Run Decision')
clear_clicked = col2.button('üßπ Clear Output')

if clear_clicked:
    for k in ['last_output_text', 'last_error']:
        st.session_state.pop(k, None)
    st.rerun()

st.write('---')
st.subheader('üß† Decision Output')

if run_clicked:
    try:
        agent_fn = resolve_agent()
        set_mode_env(mode, region, model_id)
        metrics = json.loads(metrics_text)
        with st.spinner('Running agent...'):
            start = time.time()
            decision = agent_fn(metrics)
            elapsed = time.time() - start
        st.success(f'Completed in {elapsed:.2f}s')
        st.code(json.dumps(decision, indent=2), language='json')
        st.write('**Validator:**', decision.get('validator', '‚Äî'))
        st.write('**Params:**')
        st.json(decision.get('params', {}))
        with st.expander('Reasoning'):
            st.write(decision.get('reason', '‚Äî'))
        st.session_state['last_output_text'] = json.dumps(decision, indent=2)
    except Exception as e:
        st.error(f'Run failed: {e}')
        st.session_state['last_error'] = str(e)

if 'last_output_text' in st.session_state and not run_clicked:
    st.code(st.session_state['last_output_text'], language='json')

st.write('---')
st.caption('Tip: In AWS mode be sure your AWS profile/credentials are configured and the selected model is available in your account.')
